# Avec SSL
server {

    listen {your_server_ip}:443 ssl default deferred;
    server_name {your_domain_name};

    # Logs
    access_log /home/{your_project_name}/log/ghostjs-ssl-access.log;
    error_log /home/{your_project_name}/log/ghostjs-ssl-error.log;

    # Cache
    add_header Cache-Control "public";

    # config to don't allow the browser to render the page inside an frame or iframe
    # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN;

    # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
    # to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options nosniff;

    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
    # this particular website if it was disabled by the user.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-XSS-Protection "1; mode=block";

    # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
    # you can tell the browser that it can only download content from the domains you explicitly allow
    # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # https://www.owasp.org/index.php/Content_Security_Policy
    # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
    # directives for css and js(if you have inline css or js, you will need to keep it too).
    # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google-analytics.com https://www.googletagmanager.com https://ajax.googleapis.com https://graph.facebook.com https://code.jquery.com https://disqus.com https://*.disqus.com https://*.disquscdn.com data:; img-src 'self' https://www.google-analytics.com https://ajax.googleapis.com https://www.gravatar.com https://images.unsplash.com https://disqus.com https://*.disqus.com https://*.disquscdn.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com https://maxcdn.bootstrapcdn.com https://disqus.com https://*.disqus.com https://*.disquscdn.com; font-src 'self' https://fonts.googleapis.com https://fonts.gstatic.com https://themes.googleusercontent.com https://maxcdn.bootstrapcdn.com; frame-src https://disqus.com https://*.disqus.com https://*.disquscdn.com; object-src 'none'; connect-src 'self' https://api.unsplash.com https://cdn.jsdelivr.net https://*.disqus.com;";

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    #Â SSL Certificate
    ssl_certificate /home/{your_project_name}/config/certs/live/{your_domain_name}/fullchain.pem;
    ssl_certificate_key /home/{your_project_name}/config/certs/live/{your_domain_name}/privkey.pem;

    # enable session resumption to improve https performance
    # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    ssl_dhparam /home/{your_project_name}/config/certs/dhparam.pem;

    # enables server-side protection from BEAST attacks
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;
    # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # ciphers chosen for forward secrecy and compatibility
    # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    resolver 8.8.8.8;
    ssl_stapling on;
    ssl_trusted_certificate /home/{your_project_name}/config/certs/live/{your_domain_name}/fullchain.pem;

    # Website configuration
    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-NginX-Proxy true;

        proxy_pass http://{your_project_name}:2368;
        proxy_redirect off;
    }
}

# Avec SSL mais avec www
server {

    listen {your_server_ip}:443 ssl;
    server_name www.{your_domain_name};

    access_log /home/{your_project_name}/log/ghostjs-ssl-access.log;
    error_log /home/{your_project_name}/log/ghostjs-ssl-error.log;

    ssl_certificate /home/{your_project_name}/config/certs/live/{your_domain_name}/fullchain.pem;
    ssl_certificate_key /home/{your_project_name}/config/certs/live/{your_domain_name}/privkey.pem;

    # Redirect
    location / {
        return 301 https://{your_domain_name}$request_uri;
    }
}

# Sans SSL
server {

    listen {your_server_ip}:80;
    server_name www.{your_domain_name} {your_domain_name};

    # Logs
    access_log /home/{your_project_name}/log/ghostjs-access.log;
    error_log /home/{your_project_name}/log/ghostjs-error.log;

    # Letsencrypt
    location /.well-known/acme-challenge {
        root /home/{your_project_name}/public/letsencrypt;
    }

    # Redirect
    location / {
        return 301 https://{your_domain_name}$request_uri;
    }
}
